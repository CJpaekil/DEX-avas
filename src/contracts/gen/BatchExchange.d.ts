/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export type OrderPlacement = ContractEventLog<{
  owner: string
  index: string
  buyToken: string
  sellToken: string
  validFrom: string
  validUntil: string
  priceNumerator: string
  priceDenominator: string
  0: string
  1: string
  2: string
  3: string
  4: string
  5: string
  6: string
  7: string
}>
export type TokenListing = ContractEventLog<{
  token: string
  id: string
  0: string
  1: string
}>
export type OrderCancellation = ContractEventLog<{
  owner: string
  id: string
  0: string
  1: string
}>
export type OrderDeletion = ContractEventLog<{
  owner: string
  id: string
  0: string
  1: string
}>
export type Trade = ContractEventLog<{
  owner: string
  orderId: string
  sellToken: string
  buyToken: string
  executedSellAmount: string
  executedBuyAmount: string
  0: string
  1: string
  2: string
  3: string
  4: string
  5: string
}>
export type TradeReversion = ContractEventLog<{
  owner: string
  orderId: string
  sellToken: string
  buyToken: string
  executedSellAmount: string
  executedBuyAmount: string
  0: string
  1: string
  2: string
  3: string
  4: string
  5: string
}>
export type SolutionSubmission = ContractEventLog<{
  submitter: string
  utility: string
  disregardedUtility: string
  burntFees: string
  lastAuctionBurntFees: string
  prices: string[]
  tokenIdsForPrice: string[]
  0: string
  1: string
  2: string
  3: string
  4: string
  5: string[]
  6: string[]
}>
export type Deposit = ContractEventLog<{
  user: string
  token: string
  amount: string
  batchId: string
  0: string
  1: string
  2: string
  3: string
}>
export type WithdrawRequest = ContractEventLog<{
  user: string
  token: string
  amount: string
  batchId: string
  0: string
  1: string
  2: string
  3: string
}>
export type Withdraw = ContractEventLog<{
  user: string
  token: string
  amount: string
  0: string
  1: string
  2: string
}>

export interface BatchExchange extends BaseContract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions): BatchExchange
  clone(): BatchExchange
  methods: {
    IMPROVEMENT_DENOMINATOR(): NonPayableTransactionObject<string>

    getSecondsRemainingInBatch(): NonPayableTransactionObject<string>

    requestWithdraw(token: string, amount: number | string): NonPayableTransactionObject<void>

    FEE_FOR_LISTING_TOKEN_IN_OWL(): NonPayableTransactionObject<string>

    deposit(token: string, amount: number | string): NonPayableTransactionObject<void>

    AMOUNT_MINIMUM(): NonPayableTransactionObject<string>

    feeToken(): NonPayableTransactionObject<string>

    currentPrices(arg0: number | string): NonPayableTransactionObject<string>

    orders(
      arg0: string,
      arg1: number | string,
    ): NonPayableTransactionObject<{
      buyToken: string
      sellToken: string
      validFrom: string
      validUntil: string
      priceNumerator: string
      priceDenominator: string
      usedAmount: string
      0: string
      1: string
      2: string
      3: string
      4: string
      5: string
      6: string
    }>

    UNLIMITED_ORDER_AMOUNT(): NonPayableTransactionObject<string>

    numTokens(): NonPayableTransactionObject<string>

    lastCreditBatchId(arg0: string, arg1: string): NonPayableTransactionObject<string>

    latestSolution(): NonPayableTransactionObject<{
      batchId: string
      solutionSubmitter: string
      feeReward: string
      objectiveValue: string
      0: string
      1: string
      2: string
      3: string
    }>

    getPendingDeposit(
      user: string,
      token: string,
    ): NonPayableTransactionObject<{
      0: string
      1: string
    }>

    getPendingWithdraw(
      user: string,
      token: string,
    ): NonPayableTransactionObject<{
      0: string
      1: string
    }>

    getBalance(user: string, token: string): NonPayableTransactionObject<string>

    FEE_DENOMINATOR(): NonPayableTransactionObject<string>

    ENCODED_AUCTION_ELEMENT_WIDTH(): NonPayableTransactionObject<string>

    BATCH_TIME(): NonPayableTransactionObject<string>

    getCurrentBatchId(): NonPayableTransactionObject<string>

    requestFutureWithdraw(
      token: string,
      amount: number | string,
      batchId: number | string,
    ): NonPayableTransactionObject<void>

    hasValidWithdrawRequest(user: string, token: string): NonPayableTransactionObject<boolean>

    MAX_TOKENS(): NonPayableTransactionObject<string>

    withdraw(user: string, token: string): NonPayableTransactionObject<void>

    MAX_TOUCHED_ORDERS(): NonPayableTransactionObject<string>

    addToken(token: string): NonPayableTransactionObject<void>

    placeOrder(
      buyToken: number | string,
      sellToken: number | string,
      validUntil: number | string,
      buyAmount: number | string,
      sellAmount: number | string,
    ): NonPayableTransactionObject<string>

    placeValidFromOrders(
      buyTokens: (number | string)[],
      sellTokens: (number | string)[],
      validFroms: (number | string)[],
      validUntils: (number | string)[],
      buyAmounts: (number | string)[],
      sellAmounts: (number | string)[],
    ): NonPayableTransactionObject<string[]>

    cancelOrders(orderIds: (number | string)[]): NonPayableTransactionObject<void>

    replaceOrders(
      cancellations: (number | string)[],
      buyTokens: (number | string)[],
      sellTokens: (number | string)[],
      validFroms: (number | string)[],
      validUntils: (number | string)[],
      buyAmounts: (number | string)[],
      sellAmounts: (number | string)[],
    ): NonPayableTransactionObject<string[]>

    submitSolution(
      batchId: number | string,
      claimedObjectiveValue: number | string,
      owners: string[],
      orderIds: (number | string)[],
      buyVolumes: (number | string)[],
      prices: (number | string)[],
      tokenIdsForPrice: (number | string)[],
    ): NonPayableTransactionObject<string>

    tokenAddressToIdMap(addr: string): NonPayableTransactionObject<string>

    tokenIdToAddressMap(id: number | string): NonPayableTransactionObject<string>

    hasToken(addr: string): NonPayableTransactionObject<boolean>

    getEncodedUserOrdersPaginated(
      user: string,
      offset: number | string,
      pageSize: number | string,
    ): NonPayableTransactionObject<string>

    getUsersPaginated(previousPageUser: string, pageSize: number | string): NonPayableTransactionObject<string>

    getEncodedUserOrders(user: string): NonPayableTransactionObject<string>

    getEncodedUsersPaginated(
      previousPageUser: string,
      previousPageUserOffset: number | string,
      pageSize: number | string,
    ): NonPayableTransactionObject<string>

    getEncodedOrders(): NonPayableTransactionObject<string>

    acceptingSolutions(batchId: number | string): NonPayableTransactionObject<boolean>

    getCurrentObjectiveValue(): NonPayableTransactionObject<string>
  }
  events: {
    OrderPlacement(cb?: Callback<OrderPlacement>): EventEmitter
    OrderPlacement(options?: EventOptions, cb?: Callback<OrderPlacement>): EventEmitter

    TokenListing(cb?: Callback<TokenListing>): EventEmitter
    TokenListing(options?: EventOptions, cb?: Callback<TokenListing>): EventEmitter

    OrderCancellation(cb?: Callback<OrderCancellation>): EventEmitter
    OrderCancellation(options?: EventOptions, cb?: Callback<OrderCancellation>): EventEmitter

    OrderDeletion(cb?: Callback<OrderDeletion>): EventEmitter
    OrderDeletion(options?: EventOptions, cb?: Callback<OrderDeletion>): EventEmitter

    Trade(cb?: Callback<Trade>): EventEmitter
    Trade(options?: EventOptions, cb?: Callback<Trade>): EventEmitter

    TradeReversion(cb?: Callback<TradeReversion>): EventEmitter
    TradeReversion(options?: EventOptions, cb?: Callback<TradeReversion>): EventEmitter

    SolutionSubmission(cb?: Callback<SolutionSubmission>): EventEmitter
    SolutionSubmission(options?: EventOptions, cb?: Callback<SolutionSubmission>): EventEmitter

    Deposit(cb?: Callback<Deposit>): EventEmitter
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter

    WithdrawRequest(cb?: Callback<WithdrawRequest>): EventEmitter
    WithdrawRequest(options?: EventOptions, cb?: Callback<WithdrawRequest>): EventEmitter

    Withdraw(cb?: Callback<Withdraw>): EventEmitter
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
  }

  once(event: 'OrderPlacement', cb: Callback<OrderPlacement>): void
  once(event: 'OrderPlacement', options: EventOptions, cb: Callback<OrderPlacement>): void

  once(event: 'TokenListing', cb: Callback<TokenListing>): void
  once(event: 'TokenListing', options: EventOptions, cb: Callback<TokenListing>): void

  once(event: 'OrderCancellation', cb: Callback<OrderCancellation>): void
  once(event: 'OrderCancellation', options: EventOptions, cb: Callback<OrderCancellation>): void

  once(event: 'OrderDeletion', cb: Callback<OrderDeletion>): void
  once(event: 'OrderDeletion', options: EventOptions, cb: Callback<OrderDeletion>): void

  once(event: 'Trade', cb: Callback<Trade>): void
  once(event: 'Trade', options: EventOptions, cb: Callback<Trade>): void

  once(event: 'TradeReversion', cb: Callback<TradeReversion>): void
  once(event: 'TradeReversion', options: EventOptions, cb: Callback<TradeReversion>): void

  once(event: 'SolutionSubmission', cb: Callback<SolutionSubmission>): void
  once(event: 'SolutionSubmission', options: EventOptions, cb: Callback<SolutionSubmission>): void

  once(event: 'Deposit', cb: Callback<Deposit>): void
  once(event: 'Deposit', options: EventOptions, cb: Callback<Deposit>): void

  once(event: 'WithdrawRequest', cb: Callback<WithdrawRequest>): void
  once(event: 'WithdrawRequest', options: EventOptions, cb: Callback<WithdrawRequest>): void

  once(event: 'Withdraw', cb: Callback<Withdraw>): void
  once(event: 'Withdraw', options: EventOptions, cb: Callback<Withdraw>): void
}
